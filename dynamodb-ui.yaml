AWSTemplateFormatVersion: 2010-09-09
Parameters:
    Username:
        Type: String
        Default: admin
    Password:
        Type: String
        Default: secret


    DynamoUICDN:
        Type: String
        Default: https://cdn.rawgit.com/

Resources:


    DynamoDbUiRole:
        Type: AWS::IAM::Role
        Properties:
          AssumeRolePolicyDocument:
            Version: 2012-10-17
            Statement:
            - Effect: Allow
              Principal:
                Service:
                - lambda.amazonaws.com
              Action:
              - sts:AssumeRole

          Path: "/"
          Policies:
          - PolicyName: root
            PolicyDocument:
              Version: 2012-10-17
              Statement:
              - Effect: Allow
                Action:
                - logs:*
                Resource: arn:aws:logs:*:*:*
              - Effect: Allow
                Action:
                - 'dynamodb:*'
                Resource: "*"


    DynamodbUiCallProxyFunction:
        Type: AWS::Lambda::Function
        DependsOn: [ DynamoDbUiRole ]
        Properties:
            FunctionName: DynamodbUiCallProxyFunction
            MemorySize: 128
            Handler: index.handler
            Role: !GetAtt DynamoDbUiRole.Arn
            Runtime: nodejs6.10
            Timeout: 29
            Environment:
                Variables:
                    CDN: !Ref DynamoUICDN
            Code:
                ZipFile: >
                    var AWS = require('aws-sdk');
                    var dynamodb = new AWS.DynamoDB();
                    exports.handler = function(event, context) {
                        switch ( event.resourcePath ) {
                            case '/':
                                context.done(null, { html: `
                                    <!DOCTYPE html>
                                    <html>
                                    <head>
                                    	<title>DynamoDB UI</title>
                                    	<script src="https://cdnjs.cloudflare.com/ajax/libs/ractive/1.0.0-build-107/ractive.min.js"></script>
                                    	<script src="https://cdn.rawgit.com/databank/ractive-window/master/dist/ractive-window.min.js"></script>

                                    	<script src="https://sdk.amazonaws.com/js/aws-sdk-2.160.0.min.js"></script>

                                    	<script src="https://www.promisejs.org/polyfills/promise-6.1.0.js"></script>
                                    	<script src="https://cdnjs.cloudflare.com/ajax/libs/async/2.6.0/async.js"></script>
                                    	<script src="` + process.env.CDN + `awspilot/dynamodb-ui/master/js/awspilot-dynamodb-sql.js"></script>
                                    	<script src="https://cdn.rawgit.com/awspilot/dynamodb-oop/master/dist/dynamodbjs.js"></script>

                                    	<script src="https://cdnjs.cloudflare.com/ajax/libs/lodash.js/4.17.4/lodash.min.js"></script>

                                    	<script src="https://cdnjs.cloudflare.com/ajax/libs/ace/1.2.9/ace.js"></script>
                                    	<script src="` + process.env.CDN + `awspilot/dynamodb-ui/master/js/ace/mode_sql.js"></script>
                                    	<script src="` + process.env.CDN + `awspilot/dynamodb-ui/master/js/ace/custom.js"></script>
                                    	<script src="` + process.env.CDN + `awspilot/dynamodb-ui/master/js/ractive/ractive-ace.js"></script>
                                    	<script src="` + process.env.CDN + `awspilot/dynamodb-ui/master/js/ractive/ractive-scrollarea.js"></script>

                                    	<script src="` + process.env.CDN + `awspilot/dynamodb-ui/master/js/session.js"></script>
                                    	<script src="` + process.env.CDN + `awspilot/dynamodb-ui/master/js/gui.js"></script>
                                    	<script src="` + process.env.CDN + `awspilot/dynamodb-ui/master/js/tablelist.js"></script>
                                    	<script src="` + process.env.CDN + `awspilot/dynamodb-ui/master/js/tableview.js"></script>
                                    	<script src="` + process.env.CDN + `awspilot/dynamodb-ui/master/js/tabledata.js"></script>
                                    	<script src="` + process.env.CDN + `awspilot/dynamodb-ui/master/js/tabs.js"></script>
                                    	<script src="` + process.env.CDN + `awspilot/dynamodb-ui/master/js/ui.js"></script>
                                    	<script src="` + process.env.CDN + `awspilot/dynamodb-ui/master/js/login.js"></script>

                                    	<link rel="stylesheet" href="` + process.env.CDN + `awspilot/dynamodb-ui/master/css/style.css"/>
                                    	<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/material-design-iconic-font/2.2.0/css/material-design-iconic-font.css"/>
                                        <script>
                                            var installation_type = 'apigw'
                                        </script>
                                    </head>
                                    <body class="theme_light">

                                    </body>
                                    </html>
                                `})
                                break;
                            case '/dynamodb':
                                switch ( event._POST.method ) {
                                    case 'listTables':
                                        dynamodb.listTables(event._POST.payload, context.done )
                                        break;
                                    case 'describeTable':
                                        dynamodb.describeTable(event._POST.payload, context.done )
                                        break;
                                    case 'scan':
                                        dynamodb.scan(event._POST.payload, context.done )
                                        break;
                                    case 'query':
                                        dynamodb.query(event._POST.payload, context.done )
                                        break;
                                    default:
                                        context.done(null, {
                                            debug: event,
                                        });
                                }

                                break;
                            default:
                                context.done(null, {
                                    debug: event,
                                });
                        }

                    };

    APIPermissionToRunLambda:
        Type: AWS::Lambda::Permission
        Properties:
          Action: lambda:InvokeFunction
          FunctionName: !Ref DynamodbUiCallProxyFunction
          Principal: apigateway.amazonaws.com



    Deployment30:
        Type: AWS::ApiGateway::Deployment
        Properties:
          RestApiId: !Ref API
          StageName: dummy
    v1:
        Type: AWS::ApiGateway::Stage
        Properties:
          StageName: v1
          Description: v1 Stage
          RestApiId: !Ref API
          DeploymentId: !Ref Deployment30




    API:
      Type: AWS::ApiGateway::RestApi
      Properties:
        # EndpointConfiguration:
        #    Types:
        #      - REGIONAL
        Description: DynamoDB UI
        Name: "dynamodbui"
        FailOnWarnings: true
        Body: !Sub
          - |
            swagger: "2.0"
            info:
              version: "2017-01-11T12:08:03Z"
              title: "api"
            basePath: "/v1"
            schemes:
            - "https"
            paths:
              /:
                get:
                  consumes:
                  - "application/json"
                  produces:
                  - "text/html"
                  responses:
                    200:
                      description: "200 response"
                      headers:
                        Cache-Control:
                          type: "string"
                        Pragma:
                          type: "string"
                        Expires:
                          type: "string"
                        Content-Type:
                          type: "string"
                  x-amazon-apigateway-integration:
                    responses:
                      default:
                        statusCode: "200"
                        responseParameters:
                          method.response.header.Content-Type: "'text/html'"
                        responseTemplates:
                          text/html: "#set($inputRoot = $input.path('$')) \n\n$inputRoot.html\n"
                    requestTemplates:
                        application/json:
                            |
                            {
                            	"resourcePath": "/"
                            }
                    uri: "${lambdaapi}"
                    passthroughBehavior: "when_no_templates"
                    httpMethod: "POST"
                    type: "aws"

              /dynamodb:
                  post:
                      security:
                      - basic-authorizer: []
                      consumes:
                      # - "application/x-amz-json-1.0"
                      - "application/json"
                      produces:
                      - "application/json"
                      responses:
                        200:
                          description: "200 response"
                          schema:
                            $ref: "#/definitions/Empty"
                          headers:
                            Access-Control-Allow-Origin:
                              type: "string"
                      x-amazon-apigateway-integration:
                        responses:
                          default:
                            statusCode: "200"
                            responseParameters:
                              method.response.header.Access-Control-Allow-Origin: "'*'"
                        requestTemplates:
                            #"application/x-amz-json-1.0":
                            "application/json":
                                |
                                {
                                    "resourcePath": "/dynamodb",
                                    "headers": {
                                        "auth": "$input.params().header.get('auth')"
                                    },
                                    "_HEADERS": {
                                        "x-amz-target": "$input.params().header.get('x-amz-target')"
                                    },
                                    "_POST": $input.json('$')
                                }
                        uri: "${lambdaapi}"
                        passthroughBehavior: "when_no_match"
                        httpMethod: "POST"
                        type: "aws"
                  get:
                      security:
                      - basic-authorizer: []
                      consumes:
                      - "application/json"
                      produces:
                      - "text/html"
                      responses:
                        200:
                          description: "200 response"
                          headers:
                            Content-Type:
                              type: "string"
                      x-amazon-apigateway-integration:
                        responses:
                          default:
                            statusCode: "200"
                            responseParameters:
                              method.response.header.Content-Type: "'text/html'"
                            responseTemplates:
                              text/html:
                                    |
                                    private page
                        passthroughBehavior: "when_no_match"
                        requestTemplates:
                          application/json: "{\"statusCode\": 200}"
                        type: "mock"
                  options:
                      consumes:
                      - "application/json"
                      produces:
                      - "application/json"
                      responses:
                        200:
                          description: "200 response"
                          schema:
                            $ref: "#/definitions/Empty"
                          headers:
                            Access-Control-Allow-Origin:
                              type: "string"
                            Access-Control-Allow-Methods:
                              type: "string"
                            Access-Control-Allow-Headers:
                              type: "string"
                      x-amazon-apigateway-integration:
                        responses:
                          default:
                            statusCode: "200"
                            responseParameters:
                              method.response.header.Access-Control-Allow-Methods: "'GET,POST,OPTIONS'"
                              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
                              method.response.header.Access-Control-Allow-Origin: "'*'"
                        requestTemplates:
                          application/json: "{\"statusCode\": 200}"
                        passthroughBehavior: "when_no_match"
                        type: "mock"

            securityDefinitions:
              basic-authorizer:
                type: "apiKey"
                name: "Authorization"
                in: "header"
                x-amazon-apigateway-authtype: "custom"
                x-amazon-apigateway-authorizer:
                  authorizerUri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:DynamodbUiAuthenticator/invocations"
                  authorizerResultTtlInSeconds: 0
                  identitySource: "method.request.header.Authorization"
                  type: "request"
            definitions:
              Empty:
                type: "object"
            x-amazon-apigateway-gateway-responses:
              UNAUTHORIZED:
                statusCode: 401
                responseParameters:
                  gatewayresponse.header.WWW-Authenticate: "'Basic realm=\"Secure Area\"'"
                responseTemplates:
                  application/json: "{\"message\":$context.error.messageString}"
            x-amazon-apigateway-binary-media-types:
            - "image/png"
            - "image/webp"
            - "image/*"
          - {
              lambdaapi: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:DynamodbUiCallProxyFunction/invocations'
            }

    APIPermissionToRunAuthenticator:
        Type: AWS::Lambda::Permission
        Properties:
          Action: lambda:InvokeFunction
          FunctionName: !Ref DynamodbUiAuthenticator
          Principal: apigateway.amazonaws.com

    DynamodbUiAuthenticator:
        Type: AWS::Lambda::Function
        DependsOn: [ DynamoDbUiRole ]
        Properties:
            FunctionName: DynamodbUiAuthenticator
            MemorySize: 128
            Handler: index.handler
            Role: !GetAtt DynamoDbUiRole.Arn
            Runtime: nodejs6.10
            Timeout: 29
            Environment:
                Variables:
                    http_username: !Ref Username
                    http_password: !Ref Password
            Code:
                ZipFile: >
                    'use strict';

                    const utils = {}

                    utils.b64utob64 = function (a) {
                      return a.length % 4 == 2 ? a += "==" : a.length % 4 == 3 && (a += "="), a = a.replace(/-/g, "+"), a = a.replace(/_/g, "/");
                    };

                    utils.base64decode = function (b64) {
                      // eslint-disable-next-line node/no-deprecated-api
                      return new Buffer(b64, 'base64').toString('ascii');
                    };

                    utils.atob = function (str) {
                      // eslint-disable-next-line node/no-deprecated-api
                      return new Buffer(str, 'base64').toString('binary');
                    };

                    utils.b64toBuffer = function (base64String) {
                      // eslint-disable-next-line node/no-deprecated-api
                      return new Buffer(base64String, 'base64');
                    }

                    utils.getAuthInfo = (methodArn) => {
                      if (!methodArn) {
                        throw new Error('methodArn argument is null');
                      }

                      const tmp = methodArn.split(':');
                      const apiGatewayArnTmp = tmp[5].split('/');

                      return {
                        accountId: tmp[4],
                        region: tmp[3],
                        restApiId: apiGatewayArnTmp[0],
                        stage: apiGatewayArnTmp[1],
                        method: apiGatewayArnTmp[2],
                      };
                    };


                    utils.getBearerToken = (authorizationToken) => {
                      if (!authorizationToken) return null;

                      const tokenParts = authorizationToken.split(' ');
                      return tokenParts[1];
                    };

                    const createResourceArn = (apiInfo, httpVerb, resource) => {

                      let cleanedResource = resource;
                      if (resource.substring(0, 1) === '/') {
                          cleanedResource = resource.substring(1, resource.length);
                      }

                      return 'arn:aws:execute-api:' +
                        apiInfo.region + ':' +
                        apiInfo.accountId + ':' +
                        apiInfo.restApiId + '/' +
                        apiInfo.stage + '/' +
                        httpVerb + '/' +
                        cleanedResource;
                    }

                    const createApiGatewayStatement = (apiInfo, allow, methods) => {
                      const effect = allow ? 'Allow' : 'Deny';

                      const resources = methods.map((method) => createResourceArn(apiInfo, method.verb, method.resource));

                      return {
                        Action: 'execute-api:Invoke',
                        Effect: effect,
                        Resource: resources
                      };
                    }


                    const generatePolicy = (principalId, apiInfo, endpoints, context) => {
                      const policy = {
                        principalId: principalId,
                        policyDocument: {
                          Version: '2012-10-17',
                          Statement: []
                        }
                      };

                      policy.policyDocument.Statement = endpoints.map((endpoint) =>
                        createApiGatewayStatement(apiInfo, endpoint.allow, endpoint.methods)
                      );

                      if (context) {
                        policy.context = context;
                      }

                      return policy;
                    };
                    const policyGenerator = {
                        generatePolicy: generatePolicy
                    };
                    exports.handler = (event, context, callback) => {
                        console.log("event=", event )
                        const credentials = getCredentials(event.headers);
                        if (credentials == null) {
                            console.log('missing credentials');
                            return callback('Unauthorized');
                        }

                        if (authorize(credentials)) {
                            const principalId = credentials.username;
                            const authInfo = utils.getAuthInfo(event.methodArn);

                            // allow access to all methods
                            const result = policyGenerator.generatePolicy(principalId, authInfo, [{
                              allow: true,
                              methods: [{
                                verb: '*',
                                resource: '*'
                              }]
                            }]);

                            callback(null, result);
                        } else {
                            callback('Unauthorized');
                        }
                    };

                    function getCredentials(headers) {
                        try {
                            const auth = headers.Authorization;
                            const tmp = auth.split(' ');
                            const credentials = new Buffer(tmp[1], 'base64').toString().split(':');
                            return {
                                username: credentials[0],
                                password: credentials[1]
                            };
                        } catch (e) {
                            return null;
                        }
                    }

                    function authorize(credentials) {
                        var valid_login = credentials.username === process.env.http_username && credentials.password === process.env.http_password
                        console.log(!valid_login ? '☐' : '☑',  "Authentication")
                        return valid_login;
                    }


#
